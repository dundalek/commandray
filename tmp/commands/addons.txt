Usage: heroku addons [--all|--app APP]

lists your add-ons and attachments

 -A, --all           # show add-ons and attachments for all accessible apps
 -a, --app APP       # app to run command against
 -r, --remote REMOTE # git remote of app to run command against
 --json              # return add-ons in json format

The default filter applied depends on whether you are in a Heroku app
directory. If so, the --app flag is implied. If not, the default of --all
is implied. Explicitly providing either flag overrides the default
behavior.

Examples:

  $ heroku addons --all
  $ heroku addons --app acme-inc-www

Overview of Add-ons:

  Add-ons are created with the `addons:create` command, providing a reference
  to an add-on service (such as `heroku-postgresql`) or a service and plan
  (such as `heroku-postgresql:hobby-dev`).

  At creation, each add-on is given a globally unique name. In addition, each
  add-on has at least one attachment alias to each application which uses the
  add-on. In all cases, the owning application will be attached to the add-on.
  An attachment alias is unique to its application, and is used as a prefix to
  any environment variables it exports to the application.

  In this example, a `heroku-postgresql` add-on is created and its given name
  is `postgresql-deep-6913` with a default attachment alias of `DATABASE`:

    $ heroku addons:create heroku-postgresql --app my-app
    Creating postgresql-deep-6913... done, (free)
    Adding postgresql-deep-6913 to my-app... done
    Setting DATABASE_URL and restarting my-app... done, v5
    Database has been created and is available

    $ heroku addons --app my-app
    Add-on                                     Plan       Price
    ─────────────────────────────────────────  ─────────  ─────
    heroku-postgresql (postgresql-deep-6913)   hobby-dev  free
    └─ as DATABASE

  The add-on name and, in some cases, the attachment alias can be specified by
  the user. For instance, we can add a second database to the app, specifying
  both these identifiers:

    $ heroku addons:create heroku-postgresql --app my-app --name main-db --as PRIMARY_DB
    Creating main-db... done, (free)
    Adding main-db to my-app... done
    Setting PRIMARY_DB_URL and restarting my-app... done, v6
    Database has been created and is available

    $ heroku addons --app my-app
    Add-on                                     Plan       Price
    ─────────────────────────────────────────  ─────────  ─────
    heroku-postgresql (main-db)                hobby-dev  free
    └─ as PRIMARY_DB

    heroku-postgresql (postgresql-deep-6913)   hobby-dev  free
    └─ as DATABASE

  Attachment aliases can also be specified when making attachments:

    $ heroku addons:attach main-db --app my-app --as ANOTHER_NAME
    Attaching main-db as ANOTHER_NAME to my-app... done
    Setting ANOTHER_NAME vars and restarting my-app... done, v7

    $ heroku addons --app my-app
    Add-on                                     Plan       Price
    ─────────────────────────────────────────  ─────────  ─────
    heroku-postgresql (main-db)                hobby-dev  free
    ├─ as PRIMARY_DB
    └─ as ANOTHER_NAME

    heroku-postgresql (postgresql-deep-6913)   hobby-dev  free
    └─ as DATABASE

  For more information, read https://devcenter.heroku.com/articles/add-ons.

Additional commands, type "heroku help COMMAND" for more details:

  addons:attach ADDON_NAME                        #  attach add-on resource to an app
  addons:create SERVICE:PLAN                      #  create an add-on resource
  addons:destroy ADDON_NAME [ADDON_NAME ...]      #  destroy add-on resources
  addons:detach ATTACHMENT_NAME                   #  detach add-on resource from an app
  addons:docs ADDON_NAME                          #  open an add-on's documentation in your browser
  addons:downgrade ADDON_NAME ADDON_SERVICE:PLAN  #  downgrade an existing add-on resource to PLAN
  addons:info ADDON                               #  Show info about an add-on and its attachments.
  addons:open ADDON_NAME                          #  open an add-on's dashboard in your browser
  addons:plans SERVICE                            #  list all available plans for an add-on service
  addons:rename ADDON NEW_NAME                    #  Rename an add-on.
  addons:services                                 #  list all available add-on services
  addons:upgrade ADDON_NAME ADDON_SERVICE:PLAN    #  upgrade an existing add-on resource to PLAN

